{"version":3,"file":"field-editor-list.cjs.production.min.js","sources":["../src/styles.ts","../src/ListEditor.tsx"],"sourcesContent":["import { css } from 'emotion';\n\nexport const rightToLeft = css({\n  direction: 'rtl',\n});\n","import * as React from 'react';\nimport { FieldAPI, FieldConnector, LocalesAPI } from '@contentful/field-editor-shared';\nimport * as styles from './styles';\nimport isEqual from 'lodash/isEqual';\n\nimport { TextInput } from '@contentful/f36-components';\nimport { FieldConnectorChildProps } from '@contentful/field-editor-shared/dist/FieldConnector';\n\nexport interface ListEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n\n  /**\n   * sdk.locales\n   */\n  locales: LocalesAPI;\n}\n\ntype ListValue = string[];\n\nfunction isEmptyListValue(value: ListValue | null) {\n  return value === null || value.length === 0;\n}\n\nexport function ListEditor(props: ListEditorProps) {\n  const { field, locales } = props;\n\n  const direction = locales.direction[field.locale] || 'ltr';\n\n  return (\n    <FieldConnector<ListValue>\n      throttle={0}\n      isEmptyValue={isEmptyListValue}\n      field={field}\n      isInitiallyDisabled={props.isInitiallyDisabled}>\n      {(childProps) => (\n        <ListEditorInternal {...childProps} direction={direction} isRequired={field.required} />\n      )}\n    </FieldConnector>\n  );\n}\n\nfunction ListEditorInternal({\n  setValue,\n  value,\n  errors,\n  disabled,\n  direction,\n  isRequired,\n}: FieldConnectorChildProps<ListValue> & { direction: 'rtl' | 'ltr'; isRequired: boolean }) {\n  const [valueState, setValueState] = React.useState(() => (value || []).join(', '));\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const valueAsArray = e.target.value\n      .split(',')\n      .map((item) => item.trim())\n      .filter((item) => item);\n    const changed = !isEqual(valueAsArray, value);\n    setValue(valueAsArray);\n\n    const valueAsString = valueAsArray.join(', ');\n    setValueState(changed ? valueAsString : e.target.value);\n  };\n\n  return (\n    <TextInput\n      testId=\"list-editor-input\"\n      className={direction === 'rtl' ? styles.rightToLeft : ''}\n      isRequired={isRequired}\n      isInvalid={errors.length > 0}\n      isDisabled={disabled}\n      value={valueState}\n      onChange={onChange}\n    />\n  );\n}\n\nListEditor.defaultProps = {\n  isInitiallyDisabled: true,\n};\n"],"names":["rightToLeft","css","direction","isEmptyListValue","value","length","ListEditor","props","field","locales","locale","React","FieldConnector","throttle","isEmptyValue","isInitiallyDisabled","childProps","ListEditorInternal","isRequired","required","setValue","errors","disabled","join","setValueState","TextInput","testId","className","styles","isInvalid","isDisabled","onChange","e","valueAsArray","target","split","map","item","trim","filter","changed","isEqual","valueAsString","defaultProps"],"mappings":"qeAEO,IAAMA,EAAcC,MAAI,CAC7BC,UAAW,QCwBb,SAASC,EAAiBC,UACP,OAAVA,GAAmC,IAAjBA,EAAMC,gBAGjBC,EAAWC,OACjBC,EAAmBD,EAAnBC,MAEFN,EAFqBK,EAAZE,QAEWP,UAAUM,EAAME,SAAW,aAGnDC,gBAACC,kBACCC,SAAU,EACVC,aAAcX,EACdK,MAAOA,EACPO,oBAAqBR,EAAMQ,sBAC1B,SAACC,UACAL,gBAACM,OAAuBD,GAAYd,UAAWA,EAAWgB,WAAYV,EAAMW,eAMpF,SAASF,SACPG,IAAAA,SACAhB,IAAAA,MACAiB,IAAAA,OACAC,IAAAA,SACApB,IAAAA,UACAgB,IAAAA,aAEoCP,YAAe,kBAAOP,GAAS,IAAImB,KAAK,SAAzDC,cAejBb,gBAACc,aACCC,OAAO,oBACPC,UAAyB,QAAdzB,EAAsB0B,EAAqB,GACtDV,WAAYA,EACZW,UAAWR,EAAOhB,OAAS,EAC3ByB,WAAYR,EACZlB,WACA2B,SApBa,SAACC,OACVC,EAAeD,EAAEE,OAAO9B,MAC3B+B,MAAM,KACNC,KAAI,SAACC,UAASA,EAAKC,UACnBC,QAAO,SAACF,UAASA,KACdG,GAAWC,EAAQR,EAAc7B,GACvCgB,EAASa,OAEHS,EAAgBT,EAAaV,KAAK,MACxCC,EAAcgB,EAAUE,EAAgBV,EAAEE,OAAO9B,UAgBrDE,EAAWqC,aAAe,CACxB5B,qBAAqB"}