import CodeMirror from 'codemirror';
import 'codemirror/addon/edit/matchbrackets';
import { EditorDirection } from '../../types';
export declare function create(host: HTMLElement, options: {
    direction: EditorDirection;
    readOnly: boolean;
    fixedHeight?: number | boolean;
    height?: number | string;
}): {
    destroy: () => void;
    disable: () => void;
    enable: () => void;
    attachEvent: (name: string, fn: Function, throttleInterval: number) => void;
    addKeyShortcuts: (map: any) => void;
    setValue: (value?: string | undefined) => void;
    cmd: (name: string) => void;
    moveToLineBeginning: (lineNumber?: number | undefined) => void;
    moveIfNotEmpty: () => void;
    restoreCursor: (character: number, lineNumber?: number | undefined, noFocus?: boolean | undefined) => void;
    moveToLineEnd: (lineNumber?: number | undefined) => void;
    usePrimarySelection: () => void;
    focus: () => void;
    select: (from: CodeMirror.Position, to: CodeMirror.Position) => void;
    selectBackwards: (skip: number, len: number) => void;
    selectAll: () => void;
    extendSelectionBy: (modifier: number) => void;
    insertAtCursor: (text: string) => void;
    insertAtLineBeginning: (text: string) => void;
    wrapSelection: (wrapper: string) => void;
    removeFromLineBeginning: (charCount: number) => void;
    removeSelectedText: () => void;
    replaceSelectedText: (replacement: string, select?: string | undefined) => void;
    getCursor: () => CodeMirror.Position;
    setCursor: (cursor: number | CodeMirror.Position) => void;
    getSelection: () => CodeMirror.Range | null;
    getLine: (lineNumber: number) => string;
    isLineEmpty: (lineNumber?: number | undefined) => boolean;
    getSelectedText: () => string;
    getSelectionLength: () => number;
    getCurrentLine: () => string;
    getCurrentLineNumber: () => number;
    getCurrentCharacter: () => number;
    getCurrentLineLength: () => number;
    lineStartsWith: (text: string) => boolean;
    getIndentation: () => string;
    getNl: (n?: number) => string;
    getValue: () => string;
    getLinesCount: () => number;
    getHistorySize: (which?: "undo" | "redo" | undefined) => number | {
        undo: number;
        redo: number;
    };
    setReadOnly: (value: boolean) => void;
    getHistory: () => any;
    setHistory: (history: any) => void;
    setFullsize: () => void;
    refresh: () => void;
};
