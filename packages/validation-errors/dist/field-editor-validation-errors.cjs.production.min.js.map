{"version":3,"file":"field-editor-validation-errors.cjs.production.min.js","sources":["../src/styles.ts","../src/ValidationErrors.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const errorList = css({\n  padding: 0,\n  wordWrap: 'break-word',\n  marginTop: tokens.spacingS,\n  color: tokens.red500,\n  listStyleType: 'none',\n});\n\nexport const errorMessage = css({\n  display: 'inline-flex',\n  flexDirection: 'column',\n  marginLeft: tokens.spacingXs,\n});\n\nexport const errorItem = css({\n  display: 'flex',\n  alignItems: 'center',\n});\n\nexport const entryLink = css({\n  fontWeight: Number(tokens.fontWeightDemiBold),\n});\n","import React from 'react';\nimport { ValidationError, Link } from '@contentful/app-sdk';\nimport type {\n  SpaceAPI,\n  Entry,\n  ContentType,\n  FieldAPI,\n  LocalesAPI,\n} from '@contentful/field-editor-shared';\nimport { entityHelpers } from '@contentful/field-editor-shared';\n\nimport * as styles from './styles';\n\nimport { TextLink, List, ListItem } from '@contentful/f36-components';\n\nimport { ExternalLinkIcon, InfoCircleIcon } from '@contentful/f36-icons';\n\ntype UniquenessErrorProps = {\n  error: ValidationError;\n  space: SpaceAPI;\n  localeCode: string;\n  defaultLocaleCode: string;\n  getEntryURL: (entry: Entry) => string;\n};\n\nfunction UniquenessError(props: UniquenessErrorProps) {\n  const [state, setState] = React.useState<{\n    loading: boolean;\n    entries: { id: string; title: string; href: string }[];\n  }>({\n    loading: true,\n    entries: [],\n  });\n\n  const contentTypesById = React.useMemo(\n    (): Record<string, ContentType> =>\n      // Maps ID => Content Type\n      props.space.getCachedContentTypes().reduce(\n        (prev, ct) => ({\n          ...prev,\n          [ct.sys.id]: ct,\n        }),\n        {}\n      ),\n    [props.space]\n  );\n\n  const getTitle = React.useCallback(\n    (entry: Entry) =>\n      entityHelpers.getEntryTitle({\n        entry,\n        defaultTitle: 'Untitled',\n        localeCode: props.localeCode,\n        defaultLocaleCode: props.defaultLocaleCode,\n        contentType: contentTypesById[entry.sys.contentType.sys.id],\n      }),\n    [props.localeCode, props.defaultLocaleCode, contentTypesById]\n  );\n\n  let conflicting: Link<'Entry', 'Link'>[] = [];\n  if ('conflicting' in props.error) {\n    conflicting = props.error.conflicting;\n  }\n  React.useEffect(() => {\n    const entryIds = state.entries.map((entry) => entry.id);\n    const conflictIds = conflicting.map((entry) => entry.sys.id);\n\n    // Avoid unnecessary refetching\n    if (conflictIds.every((id) => entryIds.includes(id))) {\n      return;\n    }\n\n    setState((state) => ({ ...state, loading: true }));\n\n    const query = {\n      'sys.id[in]': conflictIds.join(','),\n    };\n\n    props.space.getEntries<Entry>(query).then(({ items }) => {\n      const entries = items.map((entry) => ({\n        id: entry.sys.id,\n        title: getTitle(entry),\n        href: props.getEntryURL(entry),\n      }));\n\n      setState({\n        loading: false,\n        entries,\n      });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- TODO: Evaluate these dependencies\n  }, [getTitle, state.entries, conflicting, props.space.getEntries, props.getEntryURL]);\n\n  return (\n    <List className={styles.errorList} testId=\"validation-errors-uniqueness\">\n      <ListItem className={styles.entryLink}>\n        {state.loading ? (\n          <div>Loading title for conflicting entryâ€¦</div>\n        ) : (\n          state.entries.map((entry) => (\n            <TextLink\n              key={entry.id}\n              href={entry.href}\n              icon={<ExternalLinkIcon />}\n              alignIcon=\"end\"\n              variant=\"negative\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\">\n              {entry.title}\n            </TextLink>\n          ))\n        )}\n      </ListItem>\n    </List>\n  );\n}\n\nexport interface ValidationErrorsProps {\n  field: FieldAPI;\n  space: SpaceAPI;\n  locales: LocalesAPI;\n  getEntryURL: (entry: Entry) => string;\n}\n\nexport function ValidationErrors(props: ValidationErrorsProps) {\n  const [errors, setErrors] = React.useState<ValidationError[]>([]);\n\n  React.useEffect(() => {\n    const onErrors = (errors?: ValidationError[]) => {\n      setErrors(errors || []);\n    };\n\n    return props.field.onSchemaErrorsChanged(onErrors);\n  }, [props.field]);\n\n  if (errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <List className={styles.errorList} testId=\"validation-errors\">\n      {errors.map((error, index) => {\n        return (\n          <li\n            key={index}\n            role=\"status\"\n            aria-roledescription=\"field-locale-schema\"\n            data-error-code={`entry.schema.${error.name}`}\n            className={styles.errorItem}>\n            <InfoCircleIcon variant=\"negative\" />\n            <div className={styles.errorMessage}>\n              {error.message}\n              {error.name === 'unique' && (\n                <UniquenessError\n                  error={error}\n                  space={props.space}\n                  localeCode={props.field.locale}\n                  defaultLocaleCode={props.locales.default}\n                  getEntryURL={props.getEntryURL}\n                />\n              )}\n            </div>\n          </li>\n        );\n      })}\n    </List>\n  );\n}\n"],"names":["errorList","css","padding","wordWrap","marginTop","tokens","spacingS","color","red500","listStyleType","errorMessage","display","flexDirection","marginLeft","spacingXs","errorItem","alignItems","entryLink","fontWeight","Number","fontWeightDemiBold","UniquenessError","props","React","useState","loading","entries","state","setState","contentTypesById","useMemo","space","getCachedContentTypes","reduce","prev","ct","sys","id","getTitle","useCallback","entry","entityHelpers","getEntryTitle","defaultTitle","localeCode","defaultLocaleCode","contentType","conflicting","error","useEffect","entryIds","map","conflictIds","every","includes","query","join","getEntries","then","items","title","href","getEntryURL","List","className","styles","testId","ListItem","TextLink","key","icon","ExternalLinkIcon","alignIcon","variant","target","rel","errors","setErrors","field","onSchemaErrorsChanged","length","index","role","name","InfoCircleIcon","message","locale","locales"],"mappings":"uiBAGO,IAAMA,EAAYC,MAAI,CAC3BC,QAAS,EACTC,SAAU,aACVC,UAAWC,EAAOC,SAClBC,MAAOF,EAAOG,OACdC,cAAe,SAGJC,EAAeT,MAAI,CAC9BU,QAAS,cACTC,cAAe,SACfC,WAAYR,EAAOS,YAGRC,EAAYd,MAAI,CAC3BU,QAAS,OACTK,WAAY,WAGDC,EAAYhB,MAAI,CAC3BiB,WAAYC,OAAOd,EAAOe,sBCE5B,SAASC,EAAgBC,SACGC,EAAMC,SAG7B,CACDC,SAAS,EACTC,QAAS,KALJC,OAAOC,OAQRC,EAAmBN,EAAMO,SAC7B,kBAEER,EAAMS,MAAMC,wBAAwBC,QAClC,SAACC,EAAMC,qBACFD,UACFC,EAAGC,IAAIC,IAAKF,QAEf,MAEJ,CAACb,EAAMS,QAGHO,EAAWf,EAAMgB,aACrB,SAACC,UACCC,gBAAcC,cAAc,CAC1BF,MAAAA,EACAG,aAAc,WACdC,WAAYtB,EAAMsB,WAClBC,kBAAmBvB,EAAMuB,kBACzBC,YAAajB,EAAiBW,EAAMJ,IAAIU,YAAYV,IAAIC,QAE5D,CAACf,EAAMsB,WAAYtB,EAAMuB,kBAAmBhB,IAG1CkB,EAAuC,SACvC,gBAAiBzB,EAAM0B,QACzBD,EAAczB,EAAM0B,MAAMD,aAE5BxB,EAAM0B,WAAU,eACRC,EAAWvB,EAAMD,QAAQyB,KAAI,SAACX,UAAUA,EAAMH,MAC9Ce,EAAcL,EAAYI,KAAI,SAACX,UAAUA,EAAMJ,IAAIC,UAGrDe,EAAYC,OAAM,SAAChB,UAAOa,EAASI,SAASjB,OAIhDT,GAAS,SAACD,eAAgBA,GAAOF,SAAS,WAEpC8B,EAAQ,cACEH,EAAYI,KAAK,MAGjClC,EAAMS,MAAM0B,WAAkBF,GAAOG,MAAK,gBAClChC,IADqCiC,MACrBR,KAAI,SAACX,SAAW,CACpCH,GAAIG,EAAMJ,IAAIC,GACduB,MAAOtB,EAASE,GAChBqB,KAAMvC,EAAMwC,YAAYtB,OAG1BZ,EAAS,CACPH,SAAS,EACTC,QAAAA,UAIH,CAACY,EAAUX,EAAMD,QAASqB,EAAazB,EAAMS,MAAM0B,WAAYnC,EAAMwC,cAGtEvC,gBAACwC,QAAKC,UAAWC,EAAkBC,OAAO,gCACxC3C,gBAAC4C,YAASH,UAAWC,GAClBtC,EAAMF,QACLF,mEAEAI,EAAMD,QAAQyB,KAAI,SAACX,UACjBjB,gBAAC6C,YACCC,IAAK7B,EAAMH,GACXwB,KAAMrB,EAAMqB,KACZS,KAAM/C,gBAACgD,yBACPC,UAAU,MACVC,QAAQ,WACRC,OAAO,SACPC,IAAI,uBACHnC,EAAMoB,8CAgBYtC,SACHC,EAAMC,SAA4B,IAAvDoD,OAAQC,cAEftD,EAAM0B,WAAU,kBAKP3B,EAAMwD,MAAMC,uBAJF,SAACH,GAChBC,EAAUD,GAAU,SAIrB,CAACtD,EAAMwD,QAEY,IAAlBF,EAAOI,OACF,KAIPzD,gBAACwC,QAAKC,UAAWC,EAAkBC,OAAO,qBACvCU,EAAOzB,KAAI,SAACH,EAAOiC,UAEhB1D,sBACE8C,IAAKY,EACLC,KAAK,gCACgB,wDACYlC,EAAMmC,KACvCnB,UAAWC,GACX1C,gBAAC6D,kBAAeX,QAAQ,aACxBlD,uBAAKyC,UAAWC,GACbjB,EAAMqC,QACS,WAAfrC,EAAMmC,MACL5D,gBAACF,GACC2B,MAAOA,EACPjB,MAAOT,EAAMS,MACba,WAAYtB,EAAMwD,MAAMQ,OACxBzC,kBAAmBvB,EAAMiE,gBACzBzB,YAAaxC,EAAMwC"}