{"version":3,"file":"field-editor-boolean.cjs.production.min.js","sources":["../src/BooleanEditor.tsx"],"sourcesContent":["import * as React from 'react';\nimport get from 'lodash/get';\nimport { nanoid } from 'nanoid';\nimport { FieldAPI, ParametersAPI, FieldConnector } from '@contentful/field-editor-shared';\n\nimport { TextLink, Flex, Radio } from '@contentful/f36-components';\n\nexport interface BooleanEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n\n  /**\n   * sdk.parameters\n   */\n  parameters?: ParametersAPI & {\n    instance: {\n      trueLabel?: string;\n      falseLabel?: string;\n    };\n  };\n}\n\nexport function BooleanEditor(props: BooleanEditorProps) {\n  const { field } = props;\n\n  const options = [\n    { value: true, label: get(props.parameters, ['instance', 'trueLabel'], 'Yes'), id: nanoid(6) },\n    { value: false, label: get(props.parameters, ['instance', 'falseLabel'], 'No'), id: nanoid(6) },\n  ];\n\n  return (\n    <FieldConnector<boolean>\n      throttle={0}\n      field={field}\n      isInitiallyDisabled={props.isInitiallyDisabled}>\n      {({ disabled, value, setValue }) => {\n        const setOption = (value: string) => {\n          setValue(value === 'true' ? true : false);\n        };\n\n        const clearOption = () => {\n          setValue(null);\n        };\n\n        return (\n          <Flex testId=\"boolean-editor\" alignItems=\"center\" marginTop=\"spacingS\">\n            {options.map((item) => {\n              const id = ['entity', field.id, field.locale, item.value, item.id].join('.');\n              const checked = value === item.value;\n              return (\n                <Flex marginRight=\"spacingM\" key={id}>\n                  <Radio\n                    id={id}\n                    isDisabled={disabled}\n                    value={item.value === undefined ? '' : String(item.value)}\n                    isChecked={checked}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      if (e.target.checked) {\n                        setOption(e.target.value);\n                      }\n                    }}>\n                    {item.label}\n                  </Radio>\n                </Flex>\n              );\n            })}\n            {value !== undefined && (\n              <TextLink\n                as=\"button\"\n                testId=\"boolean-editor-clear\"\n                isDisabled={disabled}\n                onClick={clearOption}>\n                Clear\n              </TextLink>\n            )}\n          </Flex>\n        );\n      }}\n    </FieldConnector>\n  );\n}\n\nBooleanEditor.defaultProps = {\n  isInitiallyDisabled: true,\n};\n"],"names":["BooleanEditor","props","field","options","value","label","get","parameters","id","nanoid","React","FieldConnector","throttle","isInitiallyDisabled","disabled","setValue","Flex","testId","alignItems","marginTop","map","item","locale","join","checked","marginRight","key","Radio","isDisabled","undefined","String","isChecked","onChange","e","target","setOption","TextLink","as","onClick","defaultProps"],"mappings":"0RA6BgBA,EAAcC,OACpBC,EAAUD,EAAVC,MAEFC,EAAU,CACd,CAAEC,OAAO,EAAMC,MAAOC,EAAIL,EAAMM,WAAY,CAAC,WAAY,aAAc,OAAQC,GAAIC,SAAO,IAC1F,CAAEL,OAAO,EAAOC,MAAOC,EAAIL,EAAMM,WAAY,CAAC,WAAY,cAAe,MAAOC,GAAIC,SAAO,YAI3FC,gBAACC,kBACCC,SAAU,EACVV,MAAOA,EACPW,oBAAqBZ,EAAMY,sBAC1B,gBAAGC,IAAAA,SAAUV,IAAAA,MAAOW,IAAAA,gBAUjBL,gBAACM,QAAKC,OAAO,iBAAiBC,WAAW,SAASC,UAAU,YACzDhB,EAAQiB,KAAI,SAACC,OACNb,EAAK,CAAC,SAAUN,EAAMM,GAAIN,EAAMoB,OAAQD,EAAKjB,MAAOiB,EAAKb,IAAIe,KAAK,KAClEC,EAAUpB,IAAUiB,EAAKjB,aAE7BM,gBAACM,QAAKS,YAAY,WAAWC,IAAKlB,GAChCE,gBAACiB,SACCnB,GAAIA,EACJoB,WAAYd,EACZV,WAAsByB,IAAfR,EAAKjB,MAAsB,GAAK0B,OAAOT,EAAKjB,OACnD2B,UAAWP,EACXQ,SAAU,SAACC,GACLA,EAAEC,OAAOV,SArBT,SAACpB,GACjBW,EAAmB,SAAVX,GAqBK+B,CAAUF,EAAEC,OAAO9B,SAGtBiB,EAAKhB,gBAKHwB,IAAVzB,GACCM,gBAAC0B,YACCC,GAAG,SACHpB,OAAO,uBACPW,WAAYd,EACZwB,QA/BY,WAClBvB,EAAS,qBAyCnBf,EAAcuC,aAAe,CAC3B1B,qBAAqB"}