{"version":3,"file":"field-editor-url.cjs.production.min.js","sources":["../src/UrlEditor.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FieldAPI, FieldConnector } from '@contentful/field-editor-shared';\n\nimport { TextInput } from '@contentful/f36-components';\n\nexport interface UrlEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n\n  children?: (props: { value: string | null | undefined }) => React.ReactNode;\n}\n\nexport function UrlEditor(props: UrlEditorProps) {\n  const { field } = props;\n\n  return (\n    <FieldConnector<string> field={field} isInitiallyDisabled={props.isInitiallyDisabled}>\n      {({ value, errors, disabled, setValue }) => {\n        return (\n          <div data-test-id=\"url-editor\">\n            <TextInput\n              isRequired={field.required}\n              isInvalid={errors.length > 0}\n              isDisabled={disabled}\n              value={value || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setValue(e.target.value);\n              }}\n            />\n            {typeof props.children === 'function' ? props.children({ value }) : null}\n          </div>\n        );\n      }}\n    </FieldConnector>\n  );\n}\n\nUrlEditor.defaultProps = {\n  isInitiallyDisabled: true,\n};\n"],"names":["UrlEditor","props","field","React","FieldConnector","isInitiallyDisabled","value","setValue","TextInput","isRequired","required","isInvalid","errors","length","isDisabled","disabled","onChange","e","target","children","defaultProps"],"mappings":"yLAmBgBA,EAAUC,OAChBC,EAAUD,EAAVC,aAGNC,gBAACC,kBAAuBF,MAAOA,EAAOG,oBAAqBJ,EAAMI,sBAC9D,gBAAGC,IAAAA,MAAyBC,IAAAA,gBAEzBJ,sCAAkB,cAChBA,gBAACK,aACCC,WAAYP,EAAMQ,SAClBC,YALGC,OAKeC,OAAS,EAC3BC,aANWC,SAOXT,MAAOA,GAAS,GAChBU,SAAU,SAACC,GACTV,EAASU,EAAEC,OAAOZ,UAGK,mBAAnBL,EAAMkB,SAA0BlB,EAAMkB,SAAS,CAAEb,MAAAA,IAAW,SAQhFN,EAAUoB,aAAe,CACvBf,qBAAqB"}