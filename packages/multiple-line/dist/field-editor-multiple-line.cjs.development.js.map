{"version":3,"file":"field-editor-multiple-line.cjs.development.js","sources":["../src/styles.ts","../src/MultipleLineEditor.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const validationRow = css({\n  display: 'flex',\n  justifyContent: 'space-between',\n  fontSize: tokens.fontSizeM,\n  marginTop: tokens.spacingXs,\n  color: tokens.gray700,\n});\n\nexport const rightToLeft = css({\n  direction: 'rtl',\n});\n","import * as React from 'react';\nimport {\n  FieldAPI,\n  LocalesAPI,\n  FieldConnector,\n  CharCounter,\n  CharValidation,\n  ConstraintsUtils,\n} from '@contentful/field-editor-shared';\nimport * as styles from './styles';\n\nimport { Textarea } from '@contentful/f36-components';\n\nexport interface MultipleLineEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n\n  /**\n   * whether char validation should be shown or not\n   */\n  withCharValidation: boolean;\n\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n\n  /**\n   * sdk.locales\n   */\n  locales: LocalesAPI;\n}\n\nexport function MultipleLineEditor(props: MultipleLineEditorProps) {\n  const { field, locales, isInitiallyDisabled, withCharValidation } = props;\n\n  const constraints = ConstraintsUtils.fromFieldValidations(\n    field.validations,\n    field.type as 'Text'\n  );\n  const checkConstraint = ConstraintsUtils.makeChecker(constraints);\n  const direction = locales.direction[field.locale] || 'ltr';\n\n  return (\n    <FieldConnector<string> field={field} isInitiallyDisabled={isInitiallyDisabled}>\n      {({ errors, disabled, value, setValue }) => {\n        return (\n          <div data-test-id=\"multiple-line-editor\">\n            <Textarea\n              className={direction === 'rtl' ? styles.rightToLeft : ''}\n              rows={3}\n              isRequired={field.required}\n              isInvalid={errors.length > 0}\n              isDisabled={disabled}\n              value={value || ''}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setValue(e.target.value);\n              }}\n            />\n            {withCharValidation && (\n              <div className={styles.validationRow}>\n                <CharCounter value={value || ''} checkConstraint={checkConstraint} />\n                <CharValidation constraints={constraints} />\n              </div>\n            )}\n            {!withCharValidation && (\n              <div className={styles.validationRow}>\n                <CharCounter value={value || ''} checkConstraint={() => true} />\n              </div>\n            )}\n          </div>\n        );\n      }}\n    </FieldConnector>\n  );\n}\n\nMultipleLineEditor.defaultProps = {\n  isInitiallyDisabled: true,\n  withCharValidation: true,\n};\n"],"names":["validationRow","css","display","justifyContent","fontSize","tokens","fontSizeM","marginTop","spacingXs","color","gray700","rightToLeft","direction","MultipleLineEditor","props","field","locales","isInitiallyDisabled","withCharValidation","constraints","ConstraintsUtils","fromFieldValidations","validations","type","checkConstraint","makeChecker","locale","React","FieldConnector","errors","disabled","value","setValue","Textarea","className","styles","rows","isRequired","required","isInvalid","length","isDisabled","onChange","e","target","CharCounter","CharValidation","defaultProps"],"mappings":";;;;;;;;;;;;AAGO,IAAMA,aAAa,gBAAGC,WAAG,CAAC;AAC/BC,EAAAA,OAAO,EAAE,MADsB;AAE/BC,EAAAA,cAAc,EAAE,eAFe;AAG/BC,EAAAA,QAAQ,EAAEC,MAAM,CAACC,SAHc;AAI/BC,EAAAA,SAAS,EAAEF,MAAM,CAACG,SAJa;AAK/BC,EAAAA,KAAK,EAAEJ,MAAM,CAACK;AALiB,CAAD,CAAzB;AAQA,IAAMC,WAAW,gBAAGV,WAAG,CAAC;AAC7BW,EAAAA,SAAS,EAAE;AADkB,CAAD,CAAvB;;SCwBSC,mBAAmBC;AACjC,MAAQC,KAAR,GAAoED,KAApE,CAAQC,KAAR;AAAA,MAAeC,OAAf,GAAoEF,KAApE,CAAeE,OAAf;AAAA,MAAwBC,mBAAxB,GAAoEH,KAApE,CAAwBG,mBAAxB;AAAA,MAA6CC,kBAA7C,GAAoEJ,KAApE,CAA6CI,kBAA7C;AAEA,MAAMC,WAAW,GAAGC,kCAAgB,CAACC,oBAAjB,CAClBN,KAAK,CAACO,WADY,EAElBP,KAAK,CAACQ,IAFY,CAApB;AAIA,MAAMC,eAAe,GAAGJ,kCAAgB,CAACK,WAAjB,CAA6BN,WAA7B,CAAxB;AACA,MAAMP,SAAS,GAAGI,OAAO,CAACJ,SAAR,CAAkBG,KAAK,CAACW,MAAxB,KAAmC,KAArD;AAEA,SACEC,mBAAA,CAACC,gCAAD;AAAwBb,IAAAA,KAAK,EAAEA;AAAOE,IAAAA,mBAAmB,EAAEA;GAA3D,EACG;QAAGY,cAAAA;QAAQC,gBAAAA;QAAUC,aAAAA;QAAOC,gBAAAA;AAC3B,WACEL,mBAAA,MAAA;sBAAkB;KAAlB,EACEA,mBAAA,CAACM,sBAAD;AACEC,MAAAA,SAAS,EAAEtB,SAAS,KAAK,KAAd,GAAsBuB,WAAtB,GAA2C;AACtDC,MAAAA,IAAI,EAAE;AACNC,MAAAA,UAAU,EAAEtB,KAAK,CAACuB;AAClBC,MAAAA,SAAS,EAAEV,MAAM,CAACW,MAAP,GAAgB;AAC3BC,MAAAA,UAAU,EAAEX;AACZC,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAChBW,MAAAA,QAAQ,EAAE,kBAACC,CAAD;AACRX,QAAAA,QAAQ,CAACW,CAAC,CAACC,MAAF,CAASb,KAAV,CAAR;AACD;KATH,CADF,EAYGb,kBAAkB,IACjBS,mBAAA,MAAA;AAAKO,MAAAA,SAAS,EAAEC;KAAhB,EACER,mBAAA,CAACkB,6BAAD;AAAad,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAAIP,MAAAA,eAAe,EAAEA;KAAlD,CADF,EAEEG,mBAAA,CAACmB,gCAAD;AAAgB3B,MAAAA,WAAW,EAAEA;KAA7B,CAFF,CAbJ,EAkBG,CAACD,kBAAD,IACCS,mBAAA,MAAA;AAAKO,MAAAA,SAAS,EAAEC;KAAhB,EACER,mBAAA,CAACkB,6BAAD;AAAad,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAAIP,MAAAA,eAAe,EAAE;AAAA,eAAM,IAAN;AAAA;KAAlD,CADF,CAnBJ,CADF;AA0BD,GA5BH,CADF;AAgCD;AAEDX,kBAAkB,CAACkC,YAAnB,GAAkC;AAChC9B,EAAAA,mBAAmB,EAAE,IADW;AAEhCC,EAAAA,kBAAkB,EAAE;AAFY,CAAlC;;;;"}