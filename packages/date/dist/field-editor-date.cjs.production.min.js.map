{"version":3,"file":"field-editor-date.cjs.production.min.js","sources":["../src/DatepickerInput.tsx","../src/TimepickerInput.tsx","../src/utils/zoneOffsets.ts","../src/TimezonePickerInput.tsx","../src/utils/date.ts","../src/DateEditor.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\n\nimport { Datepicker } from '@contentful/f36-components';\nimport { css } from 'emotion';\n// eslint-disable-next-line -- TODO: describe this disable  no-restricted-imports\nimport moment from 'moment';\n\nconst YEAR_RANGE = 100;\n\nconst styles = {\n  root: css({\n    maxWidth: '270px',\n  }),\n};\n\nexport type DatePickerProps = {\n  value?: moment.Moment;\n  onChange: (val: moment.Moment | undefined) => void;\n  disabled?: boolean;\n};\n\nexport const DatepickerInput = (props: DatePickerProps) => {\n  const [fromDate, toDate] = useMemo(() => {\n    const fromDate = new Date();\n    fromDate.setFullYear(fromDate.getFullYear() - YEAR_RANGE);\n    const toDate = new Date();\n    toDate.setFullYear(toDate.getFullYear() + YEAR_RANGE);\n\n    return [fromDate, toDate];\n  }, []);\n\n  // The DatepickerInput should be time and timezone agnostic,\n  // thats why we don't use moment().toDate() to get Date object.\n  // moment().toDate() takes into account time and timezone and converts it\n  // based on your system timezone which can result in the date change.\n  // e.g. if user has a timezone +02:00, moment('2022-09-16T00:00+04:00').toDate()\n  // will return September 15 instead of September 16\n  const dateObj = props.value?.toObject();\n  const selectedDate = dateObj ? new Date(dateObj.years, dateObj.months, dateObj.date) : undefined;\n\n  return (\n    <Datepicker\n      className={styles.root}\n      selected={selectedDate}\n      onSelect={(day) => {\n        const momentDay = day ? moment(day) : undefined;\n        props.onChange(momentDay);\n      }}\n      inputProps={{ isDisabled: props.disabled, placeholder: '' }}\n      fromDate={fromDate}\n      toDate={toDate}\n    />\n  );\n};\n","import React, { useState, useCallback, useEffect } from 'react';\n// eslint-disable-next-line -- TODO: describe this disable  no-restricted-imports\nimport moment from 'moment';\nimport { css } from 'emotion';\n\nimport { TextInput, Flex } from '@contentful/f36-components';\n\nexport type TimepickerProps = {\n  disabled: boolean;\n  uses12hClock: boolean;\n  onChange: (value: { time: string; ampm: string }) => void;\n  time?: string;\n  ampm?: string;\n};\n\nconst validInputFormats = [\n  'hh:mm a',\n  'hh:mm A',\n  'h:mm a',\n  'h:mm A',\n  'hh:mm',\n  'k:mm',\n  'kk:mm',\n  'h a',\n  'h A',\n  'h',\n  'hh',\n  'HH',\n];\n\nfunction parseRawInput(raw: string): moment.Moment | null {\n  let time: moment.Moment | null = null;\n\n  // eslint-disable-next-line -- TODO: describe this disable  @typescript-eslint/prefer-for-of\n  for (let i = 0; i < validInputFormats.length; i++) {\n    const date = moment(raw, validInputFormats[i]);\n    if (date.isValid()) {\n      time = date;\n      break;\n    }\n  }\n\n  return time;\n}\n\nconst getDefaultTime = () => {\n  return moment(`12:00 AM`, 'hh:mm A');\n};\n\nconst formatToString = (uses12hClock: boolean, value: moment.Moment): string => {\n  return uses12hClock ? value.format('hh:mm A') : value.format('HH:mm');\n};\n\nexport const TimepickerInput = ({\n  disabled,\n  uses12hClock,\n  time = '12:00',\n  ampm = 'AM',\n  onChange,\n}: TimepickerProps) => {\n  const [selectedTime, setSelectedTime] = useState<string>(() => {\n    return formatToString(uses12hClock, getDefaultTime());\n  });\n\n  useEffect(() => {\n    setSelectedTime(formatToString(uses12hClock, moment(`${time} ${ampm}`, 'hh:mm A')));\n  }, [time, ampm, uses12hClock]);\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedTime(e.currentTarget.value);\n  }, []);\n\n  const handleFocus = useCallback((e) => {\n    e.preventDefault();\n    e.target.select();\n  }, []);\n\n  const handleBlur = () => {\n    const parsedTime = parseRawInput(selectedTime);\n    const value = parsedTime ?? getDefaultTime();\n    setSelectedTime(formatToString(uses12hClock, value));\n    onChange({ time: value.format('hh:mm'), ampm: value.format('A') });\n  };\n\n  return (\n    <Flex className={css({ width: '145px' })}>\n      <TextInput\n        aria-label=\"Select time\"\n        placeholder={uses12hClock ? '12:00 AM' : '00:00'}\n        date-time-type={uses12hClock ? '12' : '24'}\n        testId=\"time-input\"\n        value={selectedTime}\n        isDisabled={disabled}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onChange={handleChange}\n      />\n    </Flex>\n  );\n};\n","export const defaultZoneOffset = '+00:00';\n\nexport const zoneOffsets = [\n  '-12:00',\n  '-11:00',\n  '-10:00',\n  '-09:30',\n  '-09:00',\n  '-08:00',\n  '-07:00',\n  '-06:00',\n  '-05:00',\n  '-04:30',\n  '-04:00',\n  '-03:30',\n  '-03:00',\n  '-02:00',\n  '-01:00',\n  '+00:00',\n  '+01:00',\n  '+02:00',\n  '+03:00',\n  '+03:30',\n  '+04:00',\n  '+04:30',\n  '+05:00',\n  '+05:30',\n  '+05:45',\n  '+06:00',\n  '+06:30',\n  '+07:00',\n  '+08:00',\n  '+08:45',\n  '+09:00',\n  '+09:30',\n  '+10:00',\n  '+10:30',\n  '+11:00',\n  '+11:30',\n  '+12:00',\n  '+12:45',\n  '+13:00',\n  '+14:00',\n];\n","import React, { ChangeEvent } from 'react';\nimport { zoneOffsets, defaultZoneOffset } from './utils/zoneOffsets';\n\nimport { Select } from '@contentful/f36-components';\n\nexport type TimezonepickerProps = {\n  disabled: boolean;\n  onChange: (value: string) => void;\n  value?: string;\n};\nexport const TimezonepickerInput = ({\n  disabled,\n  onChange,\n  value = defaultZoneOffset,\n}: TimezonepickerProps) => {\n  return (\n    <Select\n      aria-label=\"Select timezone\"\n      testId=\"timezone-input\"\n      value={value}\n      isDisabled={disabled}\n      onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n        onChange(e.currentTarget.value);\n      }}>\n      {zoneOffsets.map((offset) => (\n        <Select.Option key={offset} value={offset}>\n          UTC{offset}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n","// eslint-disable-next-line -- TODO: describe this disable  no-restricted-imports\nimport moment from 'moment';\nimport { TimeResult } from '../types';\n\nconst ZONE_RX = /(Z|[+-]\\d{2}[:+]?\\d{2})$/;\n\nfunction startOfToday(format: string) {\n  return moment().set({ hours: 0, minutes: 0 }).format(format);\n}\n\nfunction fieldValueToMoment(datetimeString: string | null | undefined): moment.Moment | null {\n  if (!datetimeString) {\n    return null;\n  }\n\n  const datetime = moment(datetimeString);\n  if (ZONE_RX.test(datetimeString)) {\n    datetime.utcOffset(datetimeString);\n  }\n  return datetime;\n}\n\nfunction timeFromUserInput(input: TimeResult) {\n  const timeInput = input.time || '00:00';\n  return moment.utc(timeInput + '!' + input.ampm, 'HH:mm!A');\n}\n\n/**\n * Convert the user input object into either a 'moment' value or an\n * invalid symbol.\n *\n * Success is indicated by returning '{valid: value}' and failure is\n * indicated by returning '{invalid: true}'. If 'input.date' is\n * 'null' we return '{valid: null}'\n */\nfunction datetimeFromUserInput(input: TimeResult): {\n  invalid?: boolean;\n  valid: moment.Moment | null;\n} {\n  if (!input.date) {\n    return { valid: null };\n  }\n\n  const time = timeFromUserInput(input);\n\n  const date = moment\n    .parseZone(input.utcOffset, 'Z')\n    .set(input.date.toObject())\n    .set({ hours: time.hours(), minutes: time.minutes() });\n\n  if (date.isValid()) {\n    return { valid: date };\n  } else {\n    return { invalid: true, valid: null };\n  }\n}\n\n/**\n * Parse user input into a string that is stored in the API.\n *\n * Returns a sum type with either the string as the `valid` property\n * or the `invalid` property set to `false`.\n */\nexport function buildFieldValue({\n  data,\n  usesTime,\n  usesTimezone,\n}: {\n  data: TimeResult;\n  usesTime: boolean;\n  usesTimezone: boolean;\n}) {\n  const date = datetimeFromUserInput(data);\n  if (date.invalid) {\n    return {\n      invalid: true,\n    };\n  }\n\n  let format;\n  if (usesTimezone) {\n    format = 'YYYY-MM-DDTHH:mmZ';\n  } else if (usesTime) {\n    format = 'YYYY-MM-DDTHH:mm';\n  } else {\n    format = 'YYYY-MM-DD';\n  }\n  return { valid: date?.valid ? date.valid.format(format) : null, invalid: false };\n}\n\nexport function getDefaultAMPM() {\n  return 'AM';\n}\n\nexport function getDefaultUtcOffset() {\n  return startOfToday('Z');\n}\n\n/**\n * Create the user input object from the field value.\n */\nexport function userInputFromDatetime({\n  value,\n  uses12hClock,\n}: {\n  value: string | undefined | null;\n  uses12hClock: boolean;\n}): TimeResult {\n  const datetime = fieldValueToMoment(value);\n\n  if (datetime) {\n    const timeFormat = uses12hClock ? 'hh:mm' : 'HH:mm';\n    return {\n      date: datetime,\n      time: datetime.format(timeFormat),\n      ampm: datetime.format('A'),\n      utcOffset: datetime.format('Z'),\n    };\n  } else {\n    return {\n      ampm: getDefaultAMPM(),\n      utcOffset: getDefaultUtcOffset(),\n    };\n  }\n}\n","import * as React from 'react';\nimport { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { FieldAPI, FieldConnector, ParametersAPI } from '@contentful/field-editor-shared';\nimport { DatepickerInput } from './DatepickerInput';\nimport { TimepickerInput } from './TimepickerInput';\nimport { TimezonepickerInput } from './TimezonePickerInput';\nimport {\n  userInputFromDatetime,\n  buildFieldValue,\n  getDefaultAMPM,\n  getDefaultUtcOffset,\n} from './utils/date';\nimport { TimeFormat, DateTimeFormat, TimeResult } from './types';\n\nimport { TextLink } from '@contentful/f36-components';\n\nexport interface DateEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n\n  /**\n   * sdk.parameters\n   */\n  parameters?: ParametersAPI & {\n    instance?: {\n      format?: DateTimeFormat;\n      ampm?: TimeFormat;\n    };\n  };\n}\n\nconst styles = {\n  root: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  separator: css({\n    marginLeft: tokens.spacingM,\n  }),\n};\n\nfunction useEffectWithoutFirstRender(callback: Function, deps: Array<any>) {\n  const isFirstRun = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n    callback();\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- TODO: Evaluate the dependencies\n  }, deps);\n}\n\nfunction DateEditorContainer({\n  initialValue,\n  usesTime,\n  usesTimezone,\n  uses12hClock,\n  disabled,\n  hasClear,\n  onChange,\n}: {\n  initialValue: TimeResult;\n  usesTime: boolean;\n  usesTimezone: boolean;\n  uses12hClock: boolean;\n  disabled: boolean;\n  hasClear: boolean;\n  onChange: (value: TimeResult) => void;\n}) {\n  const [value, setValue] = React.useState<TimeResult>(() => initialValue);\n\n  useEffectWithoutFirstRender(() => {\n    onChange(value);\n  }, [value]);\n\n  return (\n    <div data-test-id=\"date-editor\" className={styles.root}>\n      <DatepickerInput\n        disabled={disabled}\n        value={value.date}\n        onChange={(date) => {\n          setValue((value) => ({\n            ...value,\n            date,\n          }));\n        }}\n      />\n      {usesTime && (\n        <>\n          <div className={styles.separator} />\n          <TimepickerInput\n            disabled={disabled}\n            time={value.time}\n            ampm={value.ampm}\n            onChange={({ time, ampm }) => {\n              setValue((value) => ({\n                ...value,\n                time,\n                ampm,\n              }));\n            }}\n            uses12hClock={uses12hClock}\n          />\n        </>\n      )}\n      {usesTimezone && (\n        <>\n          <div className={styles.separator} />\n          <TimezonepickerInput\n            disabled={disabled}\n            value={value.utcOffset}\n            onChange={(utcOffset) => {\n              setValue((value) => ({\n                ...value,\n                utcOffset,\n              }));\n            }}\n          />\n        </>\n      )}\n      {hasClear && (\n        <>\n          <div className={styles.separator} />\n          <TextLink\n            as=\"button\"\n            isDisabled={disabled}\n            testId=\"date-clear\"\n            onClick={() => {\n              setValue({\n                date: undefined,\n                time: undefined,\n                ampm: getDefaultAMPM(),\n                utcOffset: getDefaultUtcOffset(),\n              });\n            }}>\n            Clear\n          </TextLink>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport function DateEditor(props: DateEditorProps) {\n  const { field, parameters } = props;\n\n  const formatParam = parameters?.instance?.format ?? 'timeZ';\n  const ampmParam = parameters?.instance?.ampm ?? '24';\n\n  const usesTime = formatParam !== 'dateonly';\n  const usesTimezone = formatParam === 'timeZ';\n  const uses12hClock = ampmParam === '12';\n\n  return (\n    <FieldConnector<string>\n      field={field}\n      isInitiallyDisabled={props.isInitiallyDisabled}\n      throttle={0}>\n      {({ value, disabled, setValue, externalReset }) => {\n        const datetimeValue = userInputFromDatetime({\n          value,\n          uses12hClock,\n        });\n        return (\n          <DateEditorContainer\n            initialValue={datetimeValue}\n            uses12hClock={uses12hClock}\n            usesTimezone={usesTimezone}\n            usesTime={usesTime}\n            disabled={disabled}\n            hasClear={Boolean(value)}\n            onChange={(data) => {\n              const fieldValue = buildFieldValue({ data, usesTime, usesTimezone });\n              if (fieldValue.invalid) {\n                return;\n              }\n              // if value is present - then override it with a new one\n              // if value is not present - then set a new one if it's not nullable only\n              if (Boolean(value) || (!value && Boolean(fieldValue.valid))) {\n                setValue(fieldValue.valid);\n              }\n            }}\n            key={`date-container-${externalReset}`}\n          />\n        );\n      }}\n    </FieldConnector>\n  );\n}\n\nDateEditor.defaultProps = {\n  isInitiallyDisabled: true,\n};\n"],"names":["styles","root","css","maxWidth","DatepickerInput","props","useMemo","fromDate","Date","setFullYear","getFullYear","toDate","dateObj","value","_props$value","toObject","selectedDate","years","months","date","undefined","React","Datepicker","className","selected","onSelect","day","momentDay","moment","onChange","inputProps","isDisabled","disabled","placeholder","validInputFormats","getDefaultTime","formatToString","uses12hClock","format","TimepickerInput","time","ampm","useState","selectedTime","setSelectedTime","useEffect","handleChange","useCallback","e","currentTarget","handleFocus","preventDefault","target","select","Flex","width","TextInput","testId","onFocus","onBlur","parsedTime","raw","i","length","isValid","parseRawInput","zoneOffsets","TimezonepickerInput","Select","map","offset","Option","key","ZONE_RX","getDefaultUtcOffset","set","hours","minutes","display","alignItems","separator","marginLeft","tokens","spacingM","DateEditorContainer","callback","deps","isFirstRun","initialValue","usesTime","usesTimezone","hasClear","setValue","current","utcOffset","TextLink","as","onClick","DateEditor","parameters","formatParam","instance","_parameters$instance","ampmParam","_parameters$instance2","FieldConnector","field","isInitiallyDisabled","throttle","externalReset","datetimeValue","datetime","datetimeString","test","fieldValueToMoment","userInputFromDatetime","Boolean","data","fieldValue","input","valid","utc","timeFromUserInput","parseZone","invalid","datetimeFromUserInput","buildFieldValue","defaultProps"],"mappings":"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"}