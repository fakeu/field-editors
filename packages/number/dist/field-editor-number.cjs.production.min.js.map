{"version":3,"file":"field-editor-number.cjs.production.min.js","sources":["../src/NumberEditor.tsx","../src/NumberEditor.styles.ts","../src/parseNumber.ts","../src/utils.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { TextInput } from '@contentful/f36-components';\nimport { ArrowUpTrimmedIcon, ArrowDownTrimmedIcon } from '@contentful/f36-icons';\nimport {\n  FieldAPI,\n  FieldConnector,\n  FieldConnectorChildProps,\n} from '@contentful/field-editor-shared';\n\nimport { styles } from './NumberEditor.styles';\nimport { isNumberInputValueValid, parseNumber } from './parseNumber';\nimport { getRangeFromField, valueToString, countDecimals } from './utils';\n\nexport interface NumberEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n}\n\ntype InnerNumberEditorProps = Pick<\n  FieldConnectorChildProps<number>,\n  'disabled' | 'errors' | 'setValue' | 'value'\n> & {\n  field: NumberEditorProps['field'];\n};\n\nenum StepChangeType {\n  Increment = 'increment',\n  Decrement = 'decrement',\n}\n\nconst NUMBER_STEP = 1;\n\nfunction InnerNumberEditor({\n  disabled,\n  errors,\n  field,\n  setValue,\n  value: sdkValue,\n}: InnerNumberEditorProps) {\n  const [inputValue, setInputValue] = React.useState(valueToString(sdkValue));\n  const range = getRangeFromField(field);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    const stringSdkValue = valueToString(sdkValue);\n    // Update the input value if the SDK value (numeric) changes\n    if (stringSdkValue !== inputValue) {\n      setInputValue(stringSdkValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- we want to trigger it only when sdkValue has changed\n  }, [sdkValue]);\n\n  const updateExternalValue = (value: number | undefined) => {\n    if (sdkValue !== value) {\n      setValue(value);\n    }\n  };\n\n  const changeValueByStep = (type: StepChangeType) => {\n    const currentValue = Number.isNaN(+inputValue) ? 0 : +inputValue;\n    let nextValue =\n      type === StepChangeType.Increment ? currentValue + NUMBER_STEP : currentValue - NUMBER_STEP;\n    // Floating point numbers cannot represent all decimals precisely in binary.\n    // This can lead to unexpected results, such as 0.1 + 0.2 = 0.30000000000000004.\n    // See more details: https://floating-point-gui.de/\n    nextValue = +nextValue.toFixed(countDecimals(currentValue));\n\n    setInputValue(valueToString(nextValue));\n    setValue(nextValue);\n  };\n\n  // Keeps focus on the input\n  const handleControlPointerDown: React.PointerEventHandler<HTMLButtonElement> = (event) => {\n    event.preventDefault();\n    inputRef.current?.focus();\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<any>) => {\n    const keyToFnMap: {\n      [key: string]: () => void;\n    } = {\n      ArrowUp: () => changeValueByStep(StepChangeType.Increment),\n      ArrowDown: () => changeValueByStep(StepChangeType.Decrement),\n    };\n\n    const fn = keyToFnMap[event.key];\n    if (fn) {\n      event.preventDefault();\n      fn();\n    }\n  };\n\n  const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const value = e.target.value;\n    if (!value) {\n      setInputValue(value);\n      updateExternalValue(undefined);\n      return;\n    }\n\n    if (!isNumberInputValueValid(value, field.type)) {\n      return;\n    }\n\n    setInputValue(value);\n\n    const parsedNumber = parseNumber(value, field.type);\n    field.setInvalid(parsedNumber === undefined);\n    if (parsedNumber !== undefined) {\n      updateExternalValue(parsedNumber);\n    }\n  };\n\n  return (\n    <div data-test-id=\"number-editor\" className={styles.container}>\n      <TextInput\n        // With type=\"number\" react doesn't call onChange for certain inputs, for example if you type `e`\n        // so we use \"text\" instead and fully rely on our own validation.\n        // See more details: https://github.com/facebook/react/issues/6556\n        type=\"text\"\n        testId=\"number-editor-input\"\n        className={styles.input}\n        min={range.min}\n        max={range.max}\n        isRequired={field.required}\n        isInvalid={errors.length > 0}\n        isDisabled={disabled}\n        value={inputValue}\n        ref={inputRef}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n        // The same role that input type=\"number\" has\n        // See more details: https://www.digitala11y.com/spinbutton-role/\n        role=\"spinbutton\"\n        aria-valuenow={sdkValue ?? 0}\n        aria-valuetext={inputValue}\n        aria-valuemin={range.min}\n        aria-valuemax={range.max}\n      />\n      {/**\n       * We hide this controls from screen readers and keyboard focus.\n       * For those purposes we have a keyboard handler. The same way native input number works.\n       */}\n      {!disabled && (\n        <div className={styles.controlsWrapper} aria-hidden=\"true\">\n          <button\n            tabIndex={-1}\n            className={styles.control}\n            onClick={() => changeValueByStep(StepChangeType.Increment)}\n            onPointerDown={handleControlPointerDown}>\n            <ArrowUpTrimmedIcon size=\"medium\" />\n          </button>\n          <button\n            tabIndex={-1}\n            className={styles.control}\n            onClick={() => changeValueByStep(StepChangeType.Decrement)}\n            onPointerDown={handleControlPointerDown}>\n            <ArrowDownTrimmedIcon size=\"medium\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport function NumberEditor(props: NumberEditorProps) {\n  const { field } = props;\n\n  return (\n    <FieldConnector<number> field={field} isInitiallyDisabled={props.isInitiallyDisabled}>\n      {({\n        value,\n        errors,\n        disabled,\n        setValue,\n      }: Pick<FieldConnectorChildProps<number>, 'disabled' | 'errors' | 'setValue' | 'value'>) => (\n        <InnerNumberEditor\n          disabled={disabled}\n          errors={errors}\n          field={field}\n          setValue={setValue}\n          value={value}\n        />\n      )}\n    </FieldConnector>\n  );\n}\n\nNumberEditor.defaultProps = {\n  isInitiallyDisabled: true,\n};\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport const styles = {\n  container: css({\n    position: 'relative',\n  }),\n  controlsWrapper: css({\n    position: 'absolute',\n    top: '1px',\n    right: '1px',\n    width: tokens.spacingL,\n    height: 'calc(100% - 2px)',\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  control: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 0,\n    cursor: 'pointer',\n    padding: 0,\n    margin: 0,\n    outline: 'none',\n    border: `0 solid ${tokens.gray300}`,\n    background: 'none',\n    borderLeftWidth: '1px',\n\n    '&:first-of-type': {\n      borderTopRightRadius: tokens.borderRadiusMedium,\n    },\n\n    '&:last-of-type': {\n      borderTopWidth: '1px',\n      borderBottomRightRadius: tokens.borderRadiusMedium,\n    },\n\n    svg: {\n      fill: tokens.gray600,\n    },\n\n    '&:hover': {\n      backgroundColor: tokens.gray200,\n    },\n\n    '&:active': {\n      backgroundColor: tokens.gray300,\n    },\n  }),\n  input: css({\n    paddingRight: tokens.spacingXl,\n  }),\n};\n","export function parseNumber(value: string, type: string) {\n  if (Number.isNaN(+value)) {\n    return;\n  }\n\n  return type === 'Integer' ? parseInt(value, 10) : parseFloat(value);\n}\n\nconst FLOAT_REGEX = /^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]*)?$/;\nconst INT_REGEX = /^[+-]?([0-9]*)$/;\n\nexport function isNumberInputValueValid(value: string, type: string) {\n  const regex = type === 'Integer' ? INT_REGEX : FLOAT_REGEX;\n\n  return regex.test(value);\n}\n","import { FieldAPI } from '@contentful/field-editor-shared';\n\ntype RangeValidation = { min?: number; max?: number };\n\nexport const getRangeFromField = (field: FieldAPI): RangeValidation => {\n  const validations = field.validations || [];\n  const result = validations.find((validation) => (validation as any).range) as\n    | { range: RangeValidation }\n    | undefined;\n  return result ? result.range : {};\n};\n\nexport const valueToString = (value: number | null | undefined) => {\n  return value === undefined ? '' : String(value);\n};\n\nexport const countDecimals = (number: number) => {\n  return number.toString().split('.')[1]?.length ?? 0;\n};\n"],"names":["StepChangeType","styles","container","css","position","controlsWrapper","top","right","width","tokens","spacingL","height","display","flexDirection","control","alignItems","justifyContent","minHeight","cursor","padding","margin","outline","border","gray300","background","borderLeftWidth","borderTopRightRadius","borderRadiusMedium","borderTopWidth","borderBottomRightRadius","svg","fill","gray600","backgroundColor","gray200","input","paddingRight","spacingXl","FLOAT_REGEX","INT_REGEX","valueToString","value","undefined","String","InnerNumberEditor","disabled","errors","field","setValue","sdkValue","React","inputValue","setInputValue","range","result","validations","find","validation","getRangeFromField","inputRef","stringSdkValue","updateExternalValue","changeValueByStep","type","number","currentValue","Number","isNaN","nextValue","Increment","toFixed","toString","split","_number$toString$spli2","length","handleControlPointerDown","event","preventDefault","current","focus","className","TextInput","testId","min","max","isRequired","required","isInvalid","isDisabled","ref","onChange","e","target","test","isNumberInputValueValid","parsedNumber","parseInt","parseFloat","parseNumber","setInvalid","onKeyDown","fn","ArrowUp","ArrowDown","Decrement","key","role","tabIndex","onClick","onPointerDown","ArrowUpTrimmedIcon","size","ArrowDownTrimmedIcon","NumberEditor","props","FieldConnector","isInitiallyDisabled","defaultProps"],"mappings":"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"}