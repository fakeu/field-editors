{"version":3,"file":"field-editor-single-line.cjs.production.min.js","sources":["../src/styles.ts","../src/SingleLineEditor.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const validationRow = css({\n  display: 'flex',\n  justifyContent: 'space-between',\n  fontSize: tokens.fontSizeM,\n  marginTop: tokens.spacingXs,\n  color: tokens.gray700,\n});\n\nexport const rightToLeft = css({\n  direction: 'rtl',\n});\n","import * as React from 'react';\nimport {\n  FieldAPI,\n  FieldConnector,\n  ConstraintsUtils,\n  CharCounter,\n  CharValidation,\n  LocalesAPI,\n} from '@contentful/field-editor-shared';\nimport * as styles from './styles';\n\nimport { TextInput } from '@contentful/f36-components';\n\nexport interface SingleLineEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n\n  /**\n   * whether char validation should be shown or not\n   */\n  withCharValidation: boolean;\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n\n  /**\n   * sdk.locales\n   */\n  locales: LocalesAPI;\n}\n\nfunction isSupportedFieldTypes(val: string): val is 'Symbol' | 'Text' {\n  return val === 'Symbol' || val === 'Text';\n}\n\nexport function SingleLineEditor(props: SingleLineEditorProps) {\n  const { field, locales } = props;\n\n  if (!isSupportedFieldTypes(field.type)) {\n    throw new Error(`\"${field.type}\" field type is not supported by SingleLineEditor`);\n  }\n\n  const constraints = ConstraintsUtils.fromFieldValidations(field.validations, field.type);\n  const checkConstraint = ConstraintsUtils.makeChecker(constraints);\n  const direction = locales.direction[field.locale] || 'ltr';\n\n  return (\n    <FieldConnector<string> field={field} isInitiallyDisabled={props.isInitiallyDisabled}>\n      {({ value, errors, disabled, setValue }) => {\n        return (\n          <div data-test-id=\"single-line-editor\">\n            <TextInput\n              className={direction === 'rtl' ? styles.rightToLeft : ''}\n              isRequired={field.required}\n              isInvalid={errors.length > 0}\n              isDisabled={disabled}\n              value={value || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setValue(e.target.value);\n              }}\n            />\n            {props.withCharValidation && (\n              <div className={styles.validationRow}>\n                <CharCounter value={value || ''} checkConstraint={checkConstraint} />\n                <CharValidation constraints={constraints} />\n              </div>\n            )}\n            {props.withCharValidation === false && (\n              <div className={styles.validationRow}>\n                <CharCounter value={value || ''} checkConstraint={() => true} />\n              </div>\n            )}\n          </div>\n        );\n      }}\n    </FieldConnector>\n  );\n}\n\nSingleLineEditor.defaultProps = {\n  isInitiallyDisabled: true,\n  withCharValidation: true,\n};\n"],"names":["validationRow","css","display","justifyContent","fontSize","tokens","fontSizeM","marginTop","spacingXs","color","gray700","rightToLeft","direction","SingleLineEditor","props","val","field","locales","type","Error","constraints","ConstraintsUtils","fromFieldValidations","validations","checkConstraint","makeChecker","locale","React","FieldConnector","isInitiallyDisabled","value","setValue","TextInput","className","styles","isRequired","required","isInvalid","errors","length","isDisabled","disabled","onChange","e","target","withCharValidation","CharCounter","CharValidation","defaultProps"],"mappings":"8RAGaA,EAAgBC,MAAI,CAC/BC,QAAS,OACTC,eAAgB,gBAChBC,SAAUC,EAAOC,UACjBC,UAAWF,EAAOG,UAClBC,MAAOJ,EAAOK,UAGHC,EAAcV,MAAI,CAC7BW,UAAW,iBC0BGC,EAAiBC,OAJFC,EAKrBC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,WAJA,YADcF,EAOFC,EAAME,OANE,SAARH,QAOnB,IAAII,UAAUH,EAAME,8DAGtBE,EAAcC,mBAAiBC,qBAAqBN,EAAMO,YAAaP,EAAME,MAC7EM,EAAkBH,mBAAiBI,YAAYL,GAC/CR,EAAYK,EAAQL,UAAUI,EAAMU,SAAW,aAGnDC,gBAACC,kBAAuBZ,MAAOA,EAAOa,oBAAqBf,EAAMe,sBAC9D,gBAAGC,IAAAA,MAAyBC,IAAAA,gBAEzBJ,sCAAkB,sBAChBA,gBAACK,aACCC,UAAyB,QAAdrB,EAAsBsB,EAAqB,GACtDC,WAAYnB,EAAMoB,SAClBC,YANGC,OAMeC,OAAS,EAC3BC,aAPWC,SAQXX,MAAOA,GAAS,GAChBY,SAAU,SAACC,GACTZ,EAASY,EAAEC,OAAOd,UAGrBhB,EAAM+B,oBACLlB,uBAAKM,UAAWC,GACdP,gBAACmB,eAAYhB,MAAOA,GAAS,GAAIN,gBAAiBA,IAClDG,gBAACoB,kBAAe3B,YAAaA,MAGH,IAA7BN,EAAM+B,oBACLlB,uBAAKM,UAAWC,GACdP,gBAACmB,eAAYhB,MAAOA,GAAS,GAAIN,gBAAiB,kBAAM,UAUxEX,EAAiBmC,aAAe,CAC9BnB,qBAAqB,EACrBgB,oBAAoB"}