{"version":3,"file":"field-editor-single-line.cjs.development.js","sources":["../src/styles.ts","../src/SingleLineEditor.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const validationRow = css({\n  display: 'flex',\n  justifyContent: 'space-between',\n  fontSize: tokens.fontSizeM,\n  marginTop: tokens.spacingXs,\n  color: tokens.gray700,\n});\n\nexport const rightToLeft = css({\n  direction: 'rtl',\n});\n","import * as React from 'react';\nimport {\n  FieldAPI,\n  FieldConnector,\n  ConstraintsUtils,\n  CharCounter,\n  CharValidation,\n  LocalesAPI,\n} from '@contentful/field-editor-shared';\nimport * as styles from './styles';\n\nimport { TextInput } from '@contentful/f36-components';\n\nexport interface SingleLineEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n\n  /**\n   * whether char validation should be shown or not\n   */\n  withCharValidation: boolean;\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n\n  /**\n   * sdk.locales\n   */\n  locales: LocalesAPI;\n}\n\nfunction isSupportedFieldTypes(val: string): val is 'Symbol' | 'Text' {\n  return val === 'Symbol' || val === 'Text';\n}\n\nexport function SingleLineEditor(props: SingleLineEditorProps) {\n  const { field, locales } = props;\n\n  if (!isSupportedFieldTypes(field.type)) {\n    throw new Error(`\"${field.type}\" field type is not supported by SingleLineEditor`);\n  }\n\n  const constraints = ConstraintsUtils.fromFieldValidations(field.validations, field.type);\n  const checkConstraint = ConstraintsUtils.makeChecker(constraints);\n  const direction = locales.direction[field.locale] || 'ltr';\n\n  return (\n    <FieldConnector<string> field={field} isInitiallyDisabled={props.isInitiallyDisabled}>\n      {({ value, errors, disabled, setValue }) => {\n        return (\n          <div data-test-id=\"single-line-editor\">\n            <TextInput\n              className={direction === 'rtl' ? styles.rightToLeft : ''}\n              isRequired={field.required}\n              isInvalid={errors.length > 0}\n              isDisabled={disabled}\n              value={value || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setValue(e.target.value);\n              }}\n            />\n            {props.withCharValidation && (\n              <div className={styles.validationRow}>\n                <CharCounter value={value || ''} checkConstraint={checkConstraint} />\n                <CharValidation constraints={constraints} />\n              </div>\n            )}\n            {props.withCharValidation === false && (\n              <div className={styles.validationRow}>\n                <CharCounter value={value || ''} checkConstraint={() => true} />\n              </div>\n            )}\n          </div>\n        );\n      }}\n    </FieldConnector>\n  );\n}\n\nSingleLineEditor.defaultProps = {\n  isInitiallyDisabled: true,\n  withCharValidation: true,\n};\n"],"names":["validationRow","css","display","justifyContent","fontSize","tokens","fontSizeM","marginTop","spacingXs","color","gray700","rightToLeft","direction","isSupportedFieldTypes","val","SingleLineEditor","props","field","locales","type","Error","constraints","ConstraintsUtils","fromFieldValidations","validations","checkConstraint","makeChecker","locale","React","FieldConnector","isInitiallyDisabled","value","errors","disabled","setValue","TextInput","className","styles","isRequired","required","isInvalid","length","isDisabled","onChange","e","target","withCharValidation","CharCounter","CharValidation","defaultProps"],"mappings":";;;;;;;;;;;;AAGO,IAAMA,aAAa,gBAAGC,WAAG,CAAC;AAC/BC,EAAAA,OAAO,EAAE,MADsB;AAE/BC,EAAAA,cAAc,EAAE,eAFe;AAG/BC,EAAAA,QAAQ,EAAEC,MAAM,CAACC,SAHc;AAI/BC,EAAAA,SAAS,EAAEF,MAAM,CAACG,SAJa;AAK/BC,EAAAA,KAAK,EAAEJ,MAAM,CAACK;AALiB,CAAD,CAAzB;AAQA,IAAMC,WAAW,gBAAGV,WAAG,CAAC;AAC7BW,EAAAA,SAAS,EAAE;AADkB,CAAD,CAAvB;;ACuBP,SAASC,qBAAT,CAA+BC,GAA/B;AACE,SAAOA,GAAG,KAAK,QAAR,IAAoBA,GAAG,KAAK,MAAnC;AACD;;AAED,SAAgBC,iBAAiBC;AAC/B,MAAQC,KAAR,GAA2BD,KAA3B,CAAQC,KAAR;AAAA,MAAeC,OAAf,GAA2BF,KAA3B,CAAeE,OAAf;;AAEA,MAAI,CAACL,qBAAqB,CAACI,KAAK,CAACE,IAAP,CAA1B,EAAwC;AACtC,UAAM,IAAIC,KAAJ,QAAcH,KAAK,CAACE,IAApB,wDAAN;AACD;;AAED,MAAME,WAAW,GAAGC,kCAAgB,CAACC,oBAAjB,CAAsCN,KAAK,CAACO,WAA5C,EAAyDP,KAAK,CAACE,IAA/D,CAApB;AACA,MAAMM,eAAe,GAAGH,kCAAgB,CAACI,WAAjB,CAA6BL,WAA7B,CAAxB;AACA,MAAMT,SAAS,GAAGM,OAAO,CAACN,SAAR,CAAkBK,KAAK,CAACU,MAAxB,KAAmC,KAArD;AAEA,SACEC,mBAAA,CAACC,gCAAD;AAAwBZ,IAAAA,KAAK,EAAEA;AAAOa,IAAAA,mBAAmB,EAAEd,KAAK,CAACc;GAAjE,EACG;QAAGC,aAAAA;QAAOC,cAAAA;QAAQC,gBAAAA;QAAUC,gBAAAA;AAC3B,WACEN,mBAAA,MAAA;sBAAkB;KAAlB,EACEA,mBAAA,CAACO,uBAAD;AACEC,MAAAA,SAAS,EAAExB,SAAS,KAAK,KAAd,GAAsByB,WAAtB,GAA2C;AACtDC,MAAAA,UAAU,EAAErB,KAAK,CAACsB;AAClBC,MAAAA,SAAS,EAAER,MAAM,CAACS,MAAP,GAAgB;AAC3BC,MAAAA,UAAU,EAAET;AACZF,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAChBY,MAAAA,QAAQ,EAAE,kBAACC,CAAD;AACRV,QAAAA,QAAQ,CAACU,CAAC,CAACC,MAAF,CAASd,KAAV,CAAR;AACD;KARH,CADF,EAWGf,KAAK,CAAC8B,kBAAN,IACClB,mBAAA,MAAA;AAAKQ,MAAAA,SAAS,EAAEC;KAAhB,EACET,mBAAA,CAACmB,6BAAD;AAAahB,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAAIN,MAAAA,eAAe,EAAEA;KAAlD,CADF,EAEEG,mBAAA,CAACoB,gCAAD;AAAgB3B,MAAAA,WAAW,EAAEA;KAA7B,CAFF,CAZJ,EAiBGL,KAAK,CAAC8B,kBAAN,KAA6B,KAA7B,IACClB,mBAAA,MAAA;AAAKQ,MAAAA,SAAS,EAAEC;KAAhB,EACET,mBAAA,CAACmB,6BAAD;AAAahB,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAAIN,MAAAA,eAAe,EAAE;AAAA,eAAM,IAAN;AAAA;KAAlD,CADF,CAlBJ,CADF;AAyBD,GA3BH,CADF;AA+BD;AAEDV,gBAAgB,CAACkC,YAAjB,GAAgC;AAC9BnB,EAAAA,mBAAmB,EAAE,IADS;AAE9BgB,EAAAA,kBAAkB,EAAE;AAFU,CAAhC;;;;"}