{"version":3,"file":"field-editor-checkbox.cjs.production.min.js","sources":["../src/styles.ts","../src/CheckboxEditor.tsx"],"sourcesContent":["import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const form = css({\n  marginTop: tokens.spacingS,\n});\n\nexport const rightToLeft = css({\n  direction: 'rtl',\n});\n\nexport const invalidText = css({\n  color: tokens.red500,\n  marginLeft: tokens.spacing2Xs,\n});\n\nexport const removeBtn = css({\n  marginLeft: tokens.spacingL,\n});\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { cx } from 'emotion';\nimport get from 'lodash/get';\nimport {\n  FieldAPI,\n  FieldConnector,\n  LocalesAPI,\n  PredefinedValuesError,\n} from '@contentful/field-editor-shared';\nimport { Checkbox, Box } from '@contentful/f36-components';\nimport * as styles from './styles';\nimport { nanoid } from 'nanoid';\n\nimport { TextLink, Form } from '@contentful/f36-components';\n\nexport interface CheckboxEditorProps {\n  /**\n   * is the field disabled initially\n   */\n  isInitiallyDisabled: boolean;\n  /**\n   * sdk.field\n   */\n  field: FieldAPI;\n  /**\n   * sdk.locales\n   */\n  locales: LocalesAPI;\n}\n\ntype ListValue = string[];\n\ntype CheckboxOption = { id: string; value: string; label: string; invalid?: boolean };\n\nfunction isEmptyListValue(value: ListValue | null) {\n  return value === null || value.length === 0;\n}\n\nfunction getOptions(field: FieldAPI, id: string): CheckboxOption[] {\n  // Get first object that has a 'in' property\n  const validations = get(field, ['items', 'validations'], []) as Record<\n    string,\n    { in?: string[] }\n  >[];\n\n  const predefinedValues = validations\n    .filter((validation) => validation.in)\n    .map((validation) => validation.in);\n\n  const firstPredefinedValues = (\n    predefinedValues.length > 0 ? predefinedValues[0] : []\n  ) as string[];\n\n  return firstPredefinedValues.map((value: string, index) => ({\n    // Append a random id to distinguish between checkboxes opened in two editors (e.g. slide-in)\n    id: ['entity', field.id, field.locale, index, id].join('.'),\n    value,\n    label: value,\n  }));\n}\n\nconst getInvalidValues = (\n  field: FieldAPI,\n  values: string[],\n  options: CheckboxOption[]\n): CheckboxOption[] => {\n  const getValueFromOptions = (options as CheckboxOption[]).map((item) => item.value);\n  const invalidValues = values\n    .filter((value) => !getValueFromOptions.includes(value))\n    .map((value, index) => ({\n      id: ['entity', field.id, field.locale, index, 'invalid'].join('.'),\n      label: value,\n      invalid: true,\n      value,\n    }));\n\n  return invalidValues;\n};\n\nexport function CheckboxEditor(props: CheckboxEditorProps) {\n  const [id] = useState(() => nanoid(6));\n  const { field, locales } = props;\n\n  const options = getOptions(field, id);\n  const misconfigured = options.length === 0;\n\n  if (misconfigured) {\n    return <PredefinedValuesError />;\n  }\n\n  const direction = locales.direction[field.locale] || 'ltr';\n\n  return (\n    <FieldConnector<ListValue>\n      throttle={0}\n      isEmptyValue={isEmptyListValue}\n      field={field}\n      isInitiallyDisabled={props.isInitiallyDisabled}>\n      {({ disabled, value, setValue }) => {\n        const values = value || [];\n\n        const addValue = (value: string) => {\n          const newValues = [...values.filter((item) => item !== value), value];\n          setValue(newValues);\n        };\n\n        const removeValue = (value: string) => {\n          const newValues = values.filter((item) => item !== value);\n          setValue(newValues);\n        };\n\n        const invalidValues = getInvalidValues(field, values, options);\n        const mergedOptions = [...options, ...invalidValues];\n\n        return (\n          <Form\n            testId=\"checkbox-editor\"\n            className={cx(styles.form, direction === 'rtl' ? styles.rightToLeft : '')}>\n            {mergedOptions.map((item) => (\n              <Box key={item.id} marginBottom=\"spacingS\">\n                <Checkbox\n                  key={item.id}\n                  id={item.id}\n                  isChecked={values.includes(item.value)}\n                  isDisabled={disabled}\n                  value={item.value}\n                  name={`${field.id}.${field.locale}`}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    if (e.target.checked) {\n                      addValue(item.value);\n                    } else {\n                      removeValue(item.value);\n                    }\n                  }}>\n                  {item.label}\n                </Checkbox>\n                {item.invalid && (\n                  <>\n                    <span data-test-id=\"invalid-text\" className={styles.invalidText}>\n                      (invalid)\n                    </span>\n                    <TextLink\n                      as=\"button\"\n                      className={styles.removeBtn}\n                      onClick={() => removeValue(item.value)}>\n                      Remove\n                    </TextLink>\n                  </>\n                )}\n              </Box>\n            ))}\n          </Form>\n        );\n      }}\n    </FieldConnector>\n  );\n}\n\nCheckboxEditor.defaultProps = {\n  isInitiallyDisabled: true,\n};\n"],"names":["form","css","marginTop","tokens","spacingS","rightToLeft","direction","invalidText","color","red500","marginLeft","spacing2Xs","removeBtn","spacingL","isEmptyListValue","value","length","CheckboxEditor","props","useState","nanoid","field","locales","options","id","predefinedValues","get","filter","validation","map","index","locale","join","label","getOptions","React","PredefinedValuesError","FieldConnector","throttle","isEmptyValue","isInitiallyDisabled","disabled","setValue","values","removeValue","newValues","item","invalidValues","getValueFromOptions","includes","invalid","getInvalidValues","mergedOptions","Form","testId","className","cx","styles","Box","key","marginBottom","Checkbox","isChecked","isDisabled","name","onChange","e","target","checked","TextLink","as","onClick","defaultProps"],"mappings":"iWAGaA,EAAOC,MAAI,CACtBC,UAAWC,EAAOC,WAGPC,EAAcJ,MAAI,CAC7BK,UAAW,QAGAC,EAAcN,MAAI,CAC7BO,MAAOL,EAAOM,OACdC,WAAYP,EAAOQ,aAGRC,EAAYX,MAAI,CAC3BS,WAAYP,EAAOU,WCkBrB,SAASC,EAAiBC,UACP,OAAVA,GAAmC,IAAjBA,EAAMC,gBA4CjBC,EAAeC,SAChBC,YAAS,kBAAMC,SAAO,MAC3BC,EAAmBH,EAAnBG,MAAOC,EAAYJ,EAAZI,QAETC,EA7CR,SAAoBF,EAAiBG,OAO7BC,EALcC,EAAIL,EAAO,CAAC,QAAS,eAAgB,IAMtDM,QAAO,SAACC,UAAeA,QACvBC,KAAI,SAACD,UAAeA,eAGrBH,EAAiBT,OAAS,EAAIS,EAAiB,GAAK,IAGzBI,KAAI,SAACd,EAAee,SAAW,CAE1DN,GAAI,CAAC,SAAUH,EAAMG,GAAIH,EAAMU,OAAQD,EAAON,GAAIQ,KAAK,KACvDjB,MAAAA,EACAkB,MAAOlB,MA0BOmB,CAAWb,WACc,IAAnBE,EAAQP,cAGrBmB,gBAACC,kCAGJ9B,EAAYgB,EAAQhB,UAAUe,EAAMU,SAAW,aAGnDI,gBAACE,kBACCC,SAAU,EACVC,aAAczB,EACdO,MAAOA,EACPmB,oBAAqBtB,EAAMsB,sBAC1B,gBAAGC,IAAAA,SAAiBC,IAAAA,SACbC,IADM5B,OACY,GAOlB6B,EAAc,SAAC7B,OACb8B,EAAYF,EAAOhB,QAAO,SAACmB,UAASA,IAAS/B,KACnD2B,EAASG,IAGLE,EAlDW,SACvB1B,EACAsB,EACApB,OAEMyB,EAAuBzB,EAA6BM,KAAI,SAACiB,UAASA,EAAK/B,gBACvD4B,EACnBhB,QAAO,SAACZ,UAAWiC,EAAoBC,SAASlC,MAChDc,KAAI,SAACd,EAAOe,SAAW,CACtBN,GAAI,CAAC,SAAUH,EAAMG,GAAIH,EAAMU,OAAQD,EAAO,WAAWE,KAAK,KAC9DC,MAAOlB,EACPmC,SAAS,EACTnC,MAAAA,MAsCwBoC,CAAiB9B,EAAOsB,EAAQpB,GAChD6B,YAAoB7B,EAAYwB,UAGpCZ,gBAACkB,QACCC,OAAO,kBACPC,UAAWC,KAAGC,EAA2B,QAAdnD,EAAsBmD,EAAqB,KACrEL,EAAcvB,KAAI,SAACiB,UAClBX,gBAACuB,OAAIC,IAAKb,EAAKtB,GAAIoC,aAAa,YAC9BzB,gBAAC0B,YACCF,IAAKb,EAAKtB,GACVA,GAAIsB,EAAKtB,GACTsC,UAAWnB,EAAOM,SAASH,EAAK/B,OAChCgD,WAAYtB,EACZ1B,MAAO+B,EAAK/B,MACZiD,KAAS3C,EAAMG,OAAMH,EAAMU,OAC3BkC,SAAU,SAACC,GA1BJ,IAACnD,EACV8B,EA0BQqB,EAAEC,OAAOC,SA3BPrD,EA4BK+B,EAAK/B,MA3BpB8B,YAAgBF,EAAOhB,QAAO,SAACmB,UAASA,IAAS/B,MAAQA,IAC/D2B,EAASG,IA4BGD,EAAYE,EAAK/B,SAGpB+B,EAAKb,OAEPa,EAAKI,SACJf,gCACEA,uCAAmB,eAAeoB,UAAWE,gBAG7CtB,gBAACkC,YACCC,GAAG,SACHf,UAAWE,EACXc,QAAS,kBAAM3B,EAAYE,EAAK/B,4BActDE,EAAeuD,aAAe,CAC5BhC,qBAAqB"}